// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zvash/accounting-system/internal/sql (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	sql "github.com/zvash/accounting-system/internal/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddToAccountBalanceById mocks base method.
func (m *MockStore) AddToAccountBalanceById(arg0 context.Context, arg1 sql.AddToAccountBalanceByIdParams) (sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToAccountBalanceById", arg0, arg1)
	ret0, _ := ret[0].(sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToAccountBalanceById indicates an expected call of AddToAccountBalanceById.
func (mr *MockStoreMockRecorder) AddToAccountBalanceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToAccountBalanceById", reflect.TypeOf((*MockStore)(nil).AddToAccountBalanceById), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 sql.CreateAccountParams) (sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1 sql.CreateEntryParams) (sql.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(sql.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 sql.CreateSessionParams) (sql.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(sql.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 sql.CreateTransferParams) (sql.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(sql.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 sql.CreateUserParams) (sql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTransaction mocks base method.
func (m *MockStore) CreateUserTransaction(arg0 context.Context, arg1 sql.CreateUserTransactionParams) (sql.CreateUserTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTransaction", arg0, arg1)
	ret0, _ := ret[0].(sql.CreateUserTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTransaction indicates an expected call of CreateUserTransaction.
func (mr *MockStoreMockRecorder) CreateUserTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTransaction", reflect.TypeOf((*MockStore)(nil).CreateUserTransaction), arg0, arg1)
}

// DeleteAccountById mocks base method.
func (m *MockStore) DeleteAccountById(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountById", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountById indicates an expected call of DeleteAccountById.
func (mr *MockStoreMockRecorder) DeleteAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountById", reflect.TypeOf((*MockStore)(nil).DeleteAccountById), arg0, arg1)
}

// DeleteEntryById mocks base method.
func (m *MockStore) DeleteEntryById(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryById", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntryById indicates an expected call of DeleteEntryById.
func (mr *MockStoreMockRecorder) DeleteEntryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryById", reflect.TypeOf((*MockStore)(nil).DeleteEntryById), arg0, arg1)
}

// DeleteTransferById mocks base method.
func (m *MockStore) DeleteTransferById(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferById", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransferById indicates an expected call of DeleteTransferById.
func (mr *MockStoreMockRecorder) DeleteTransferById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferById", reflect.TypeOf((*MockStore)(nil).DeleteTransferById), arg0, arg1)
}

// GetAccountById mocks base method.
func (m *MockStore) GetAccountById(arg0 context.Context, arg1 int64) (sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", arg0, arg1)
	ret0, _ := ret[0].(sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockStoreMockRecorder) GetAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockStore)(nil).GetAccountById), arg0, arg1)
}

// GetAccountByIdForUpdate mocks base method.
func (m *MockStore) GetAccountByIdForUpdate(arg0 context.Context, arg1 int64) (sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByIdForUpdate", arg0, arg1)
	ret0, _ := ret[0].(sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIdForUpdate indicates an expected call of GetAccountByIdForUpdate.
func (mr *MockStoreMockRecorder) GetAccountByIdForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIdForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountByIdForUpdate), arg0, arg1)
}

// GetAllAccounts mocks base method.
func (m *MockStore) GetAllAccounts(arg0 context.Context) ([]sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", arg0)
	ret0, _ := ret[0].([]sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockStoreMockRecorder) GetAllAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockStore)(nil).GetAllAccounts), arg0)
}

// GetAllAccountsPaginated mocks base method.
func (m *MockStore) GetAllAccountsPaginated(arg0 context.Context, arg1 sql.GetAllAccountsPaginatedParams) ([]sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccountsPaginated", arg0, arg1)
	ret0, _ := ret[0].([]sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccountsPaginated indicates an expected call of GetAllAccountsPaginated.
func (mr *MockStoreMockRecorder) GetAllAccountsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccountsPaginated", reflect.TypeOf((*MockStore)(nil).GetAllAccountsPaginated), arg0, arg1)
}

// GetAllEntries mocks base method.
func (m *MockStore) GetAllEntries(arg0 context.Context) ([]sql.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntries", arg0)
	ret0, _ := ret[0].([]sql.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEntries indicates an expected call of GetAllEntries.
func (mr *MockStoreMockRecorder) GetAllEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntries", reflect.TypeOf((*MockStore)(nil).GetAllEntries), arg0)
}

// GetAllEntriesPaginated mocks base method.
func (m *MockStore) GetAllEntriesPaginated(arg0 context.Context, arg1 sql.GetAllEntriesPaginatedParams) ([]sql.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntriesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]sql.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEntriesPaginated indicates an expected call of GetAllEntriesPaginated.
func (mr *MockStoreMockRecorder) GetAllEntriesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntriesPaginated", reflect.TypeOf((*MockStore)(nil).GetAllEntriesPaginated), arg0, arg1)
}

// GetAllTransfers mocks base method.
func (m *MockStore) GetAllTransfers(arg0 context.Context) ([]sql.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransfers", arg0)
	ret0, _ := ret[0].([]sql.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransfers indicates an expected call of GetAllTransfers.
func (mr *MockStoreMockRecorder) GetAllTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransfers", reflect.TypeOf((*MockStore)(nil).GetAllTransfers), arg0)
}

// GetAllTransfersPaginated mocks base method.
func (m *MockStore) GetAllTransfersPaginated(arg0 context.Context, arg1 sql.GetAllTransfersPaginatedParams) ([]sql.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransfersPaginated", arg0, arg1)
	ret0, _ := ret[0].([]sql.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransfersPaginated indicates an expected call of GetAllTransfersPaginated.
func (mr *MockStoreMockRecorder) GetAllTransfersPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransfersPaginated", reflect.TypeOf((*MockStore)(nil).GetAllTransfersPaginated), arg0, arg1)
}

// GetAllUserAccountsPaginated mocks base method.
func (m *MockStore) GetAllUserAccountsPaginated(arg0 context.Context, arg1 sql.GetAllUserAccountsPaginatedParams) ([]sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserAccountsPaginated", arg0, arg1)
	ret0, _ := ret[0].([]sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserAccountsPaginated indicates an expected call of GetAllUserAccountsPaginated.
func (mr *MockStoreMockRecorder) GetAllUserAccountsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserAccountsPaginated", reflect.TypeOf((*MockStore)(nil).GetAllUserAccountsPaginated), arg0, arg1)
}

// GetEntryById mocks base method.
func (m *MockStore) GetEntryById(arg0 context.Context, arg1 int64) (sql.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryById", arg0, arg1)
	ret0, _ := ret[0].(sql.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryById indicates an expected call of GetEntryById.
func (mr *MockStoreMockRecorder) GetEntryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryById", reflect.TypeOf((*MockStore)(nil).GetEntryById), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (sql.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(sql.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetTransferById mocks base method.
func (m *MockStore) GetTransferById(arg0 context.Context, arg1 int64) (sql.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferById", arg0, arg1)
	ret0, _ := ret[0].(sql.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferById indicates an expected call of GetTransferById.
func (mr *MockStoreMockRecorder) GetTransferById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferById", reflect.TypeOf((*MockStore)(nil).GetTransferById), arg0, arg1)
}

// GetTwoAccountsInvolvedInTransfer mocks base method.
func (m *MockStore) GetTwoAccountsInvolvedInTransfer(arg0 context.Context, arg1 sql.GetTwoAccountsInvolvedInTransferParams) ([]sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwoAccountsInvolvedInTransfer", arg0, arg1)
	ret0, _ := ret[0].([]sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwoAccountsInvolvedInTransfer indicates an expected call of GetTwoAccountsInvolvedInTransfer.
func (mr *MockStoreMockRecorder) GetTwoAccountsInvolvedInTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwoAccountsInvolvedInTransfer", reflect.TypeOf((*MockStore)(nil).GetTwoAccountsInvolvedInTransfer), arg0, arg1)
}

// GetUserAccountById mocks base method.
func (m *MockStore) GetUserAccountById(arg0 context.Context, arg1 sql.GetUserAccountByIdParams) (sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountById", arg0, arg1)
	ret0, _ := ret[0].(sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountById indicates an expected call of GetUserAccountById.
func (mr *MockStoreMockRecorder) GetUserAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountById", reflect.TypeOf((*MockStore)(nil).GetUserAccountById), arg0, arg1)
}

// GetUserByUserName mocks base method.
func (m *MockStore) GetUserByUserName(arg0 context.Context, arg1 string) (sql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", arg0, arg1)
	ret0, _ := ret[0].(sql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockStoreMockRecorder) GetUserByUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockStore)(nil).GetUserByUserName), arg0, arg1)
}

// TransferTransaction mocks base method.
func (m *MockStore) TransferTransaction(arg0 context.Context, arg1 sql.TransferTransactionParams) (sql.TransferTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTransaction", arg0, arg1)
	ret0, _ := ret[0].(sql.TransferTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTransaction indicates an expected call of TransferTransaction.
func (mr *MockStoreMockRecorder) TransferTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTransaction", reflect.TypeOf((*MockStore)(nil).TransferTransaction), arg0, arg1)
}

// UpdateAccountBalanceById mocks base method.
func (m *MockStore) UpdateAccountBalanceById(arg0 context.Context, arg1 sql.UpdateAccountBalanceByIdParams) (sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalanceById", arg0, arg1)
	ret0, _ := ret[0].(sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBalanceById indicates an expected call of UpdateAccountBalanceById.
func (mr *MockStoreMockRecorder) UpdateAccountBalanceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalanceById", reflect.TypeOf((*MockStore)(nil).UpdateAccountBalanceById), arg0, arg1)
}

// UpdateAccountById mocks base method.
func (m *MockStore) UpdateAccountById(arg0 context.Context, arg1 sql.UpdateAccountByIdParams) (sql.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountById", arg0, arg1)
	ret0, _ := ret[0].(sql.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountById indicates an expected call of UpdateAccountById.
func (mr *MockStoreMockRecorder) UpdateAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountById", reflect.TypeOf((*MockStore)(nil).UpdateAccountById), arg0, arg1)
}

// UpdateEntryById mocks base method.
func (m *MockStore) UpdateEntryById(arg0 context.Context, arg1 sql.UpdateEntryByIdParams) (sql.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryById", arg0, arg1)
	ret0, _ := ret[0].(sql.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntryById indicates an expected call of UpdateEntryById.
func (mr *MockStoreMockRecorder) UpdateEntryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryById", reflect.TypeOf((*MockStore)(nil).UpdateEntryById), arg0, arg1)
}

// UpdateTransferById mocks base method.
func (m *MockStore) UpdateTransferById(arg0 context.Context, arg1 sql.UpdateTransferByIdParams) (sql.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferById", arg0, arg1)
	ret0, _ := ret[0].(sql.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransferById indicates an expected call of UpdateTransferById.
func (mr *MockStoreMockRecorder) UpdateTransferById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferById", reflect.TypeOf((*MockStore)(nil).UpdateTransferById), arg0, arg1)
}

// UpdateUserByUsername mocks base method.
func (m *MockStore) UpdateUserByUsername(arg0 context.Context, arg1 sql.UpdateUserByUsernameParams) (sql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(sql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByUsername indicates an expected call of UpdateUserByUsername.
func (mr *MockStoreMockRecorder) UpdateUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByUsername", reflect.TypeOf((*MockStore)(nil).UpdateUserByUsername), arg0, arg1)
}
