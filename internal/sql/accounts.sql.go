// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: accounts.sql

package sql

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (owner, balance, currency)
VALUES ($1, $2, $3)
RETURNING id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccountById = `-- name: DeleteAccountById :execrows
DELETE
FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccountById(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteAccountById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, owner, balance, currency, created_at
FROM accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT id, owner, balance, currency, created_at
FROM accounts
ORDER BY created_at
`

func (q *Queries) GetAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAccountsPaginated = `-- name: GetAllAccountsPaginated :many
SELECT id, owner, balance, currency, created_at
FROM accounts
ORDER BY created_at
OFFSET $1 LIMIT $2
`

type GetAllAccountsPaginatedParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetAllAccountsPaginated(ctx context.Context, arg GetAllAccountsPaginatedParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountsPaginated, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountById = `-- name: UpdateAccountById :one
UPDATE accounts
SET owner    = coalesce($2, owner),
    balance  = coalesce($3, balance),
    currency = coalesce($4, currency)
WHERE id = $1
RETURNING id, owner, balance, currency, created_at
`

type UpdateAccountByIdParams struct {
	ID       int64          `json:"id"`
	Owner    sql.NullString `json:"owner"`
	Balance  sql.NullInt64  `json:"balance"`
	Currency sql.NullString `json:"currency"`
}

func (q *Queries) UpdateAccountById(ctx context.Context, arg UpdateAccountByIdParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountById,
		arg.ID,
		arg.Owner,
		arg.Balance,
		arg.Currency,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
