// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: entries.sql

package sql

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (account_id, amount)
VALUES ($1, $2)
RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64 `json:"account_id"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntryById = `-- name: DeleteEntryById :execrows
DELETE
FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntryById(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteEntryById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllEntries = `-- name: GetAllEntries :many
SELECT id, account_id, amount, created_at
FROM entries
ORDER BY created_at
`

func (q *Queries) GetAllEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEntriesPaginated = `-- name: GetAllEntriesPaginated :many
SELECT id, account_id, amount, created_at
FROM entries
ORDER BY created_at
OFFSET $1 LIMIT $2
`

type GetAllEntriesPaginatedParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetAllEntriesPaginated(ctx context.Context, arg GetAllEntriesPaginatedParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntriesPaginated, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryById = `-- name: GetEntryById :one
SELECT id, account_id, amount, created_at
FROM entries
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEntryById(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryById, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateEntryById = `-- name: UpdateEntryById :one
UPDATE entries
SET account_id = coalesce($2, account_id),
    amount     = coalesce($3, amount)
WHERE id = $1
RETURNING id, account_id, amount, created_at
`

type UpdateEntryByIdParams struct {
	ID        int64         `json:"id"`
	AccountID sql.NullInt64 `json:"account_id"`
	Amount    sql.NullInt64 `json:"amount"`
}

func (q *Queries) UpdateEntryById(ctx context.Context, arg UpdateEntryByIdParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntryById, arg.ID, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
